pipeline {
    agent any

    tools {
        jdk 'JDK17'
        nodejs 'NodeJS'
    }

    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'amazon-prime', description: 'Enter repository name:')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '941377143083', description: 'Enter AWS Account ID:') // Added missing quote
    }

   environment {
        SCANNER_HOME = tool 'SonarQube Scanner'
    }

    stages {
        stage('1) Git Checkout') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/pandacloud1/DevopsProject2.git'
            }
        }

        stage('2) SonarQube Analysis') {
            steps {
                withSonarQubeEnv  ('sonarqube-server') {
                    sh """
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=amazon-prime \
                    -Dsonar.projectKey=amazon-prime
                    """
                }
            }
        }

        stage('3) Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false, 
                credentialsId: 'sonar-token'
            }
        }

        stage('4) Trivy File Scan') {
            steps {
                sh "trivy fs . > trivyfilescanreport.txt"
            }
        }

        stage('5) Maven Build') {
            steps {
                sh "mvn clean install"
            }
        }

        stage('6) Upload Artifact to JFrog Artifactory') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'jfrog-creds', usernameVariable: 'JFROG_USER', passwordVariable: 'JFROG_PASS')]) {
                    sh """
                        curl -u $JFROG_USER:$JFROG_PASS -T target/your-artifact.jar "https://your-jfrog-domain/artifactory/your-repo-name/your-artifact-${BUILD_NUMBER}.jar"
                    """
                }
            }
        }        

        stage('7) Build Docker Image') {
            steps {
                sh "docker build -t ${params.ECR_REPO_NAME} ."
            }
        }

        stage('8) Trivy Image Scan') {
            steps {
                 sh "trivy image ${params.ECR_REPO_NAME} > trivyimagescanreport.txt"
            }
        }

        //Assume ECR repository is already created. Hence, skip this stage in interview
        stage('9) Create ECR Repository') { 
            steps {
                withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY'), 
                                 string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_KEY')]) {
                    sh """
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY
                    aws configure set aws_secret_access_key $AWS_SECRET_KEY
                    aws ecr describe-repositories --repository-names ${params.ECR_REPO_NAME} --region ap-south-1 || \
                    aws ecr create-repository --repository-name ${params.ECR_REPO_NAME} --region ap-south-1
                    """
                }
            }
        }

        stage('10) Login to ECR & Tag image') {
            steps {
                withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY'), 
                                 string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_KEY')]) {
                    sh """
                    aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com
                    docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                    docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                    """
                }
            }
        }
        
        stage('11) Push image to ECR') {
            steps {
                 withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY'), 
                                 string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_KEY')]) {
                    sh """
                    docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                    docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                    """
                }
            }
        }
        
        stage('12) Cleanup Images') {
            steps {
                sh """
                docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
		        docker images
                """
            }
        }
    }
}