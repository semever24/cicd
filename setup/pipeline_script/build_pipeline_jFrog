pipeline {
    agent any

    parameters {
        string(name: 'ARTIFACTORY_REPO', defaultValue: 'docker-local', description: 'Enter Artifactory Docker repo name')
        string(name: 'ARTIFACTORY_URL', defaultValue: 'https://your-artifactory-domain/artifactory', description: 'Artifactory base URL')
    }

    tools {
        jdk 'JDK'
        nodejs 'NodeJS'
    }

    environment {
        SCANNER_HOME = tool 'SonarQube Scanner'
    }

    stages {
        stage('1. Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/pandacloud1/DevopsProject2.git'
            }
        }

        stage('2. SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=amazon-prime \
                    -Dsonar.projectKey=amazon-prime
                    """
                }
            }
        }

        stage('3. Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false, 
                credentialsId: 'sonar-token'
            }
        }

        stage('4. Install npm') {
            steps {
                sh "npm install"
            }
        }

        stage('5. Trivy Scan') {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }

        stage('6. Build Docker Image') {
            steps {
                sh "docker build -t ${params.ARTIFACTORY_REPO}/amazon-prime:${BUILD_NUMBER} ."
            }
        }

        stage('7. Login to JFrog Artifactory') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'artifactory-creds', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASS')]) {
                    sh """
                    echo $ART_PASS | docker login ${params.ARTIFACTORY_URL} -u $ART_USER --password-stdin
                    """
                }
            }
        }

        stage('8. Push Image to Artifactory') {
            steps {
                sh """
                docker tag ${params.ARTIFACTORY_REPO}/amazon-prime:${BUILD_NUMBER} ${params.ARTIFACTORY_URL}/${params.ARTIFACTORY_REPO}/amazon-prime:${BUILD_NUMBER}
                docker push ${params.ARTIFACTORY_URL}/${params.ARTIFACTORY_REPO}/amazon-prime:${BUILD_NUMBER}
                """
            }
        }

        stage('9. Cleanup Images') {
            steps {
                sh """
                docker rmi ${params.ARTIFACTORY_URL}/${params.ARTIFACTORY_REPO}/amazon-prime:${BUILD_NUMBER}
                docker images
                """
            }
        }
    }
}